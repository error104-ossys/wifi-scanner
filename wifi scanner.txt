#!/usr/bin/env python3
import subprocess
import platform
import ipaddress
import socket
import sys
import threading
import queue

# ANSI escape codes for black background and green text
BLACK_BG_GREEN_TEXT = "\033[0;32;40m"
RESET_COLOR = "\033[0m"

def get_local_ip_and_netmask():
    """Get the local IP address and netmask of the primary network interface."""
    # Try platform specific commands
    system = platform.system().lower()
    try:
        if system == "linux":
            # Use ip command to get IP and netmask
            result = subprocess.run(["ip", "addr", "show"], capture_output=True, text=True)
            lines = result.stdout.splitlines()
            ip = None
            netmask = None
            for line in lines:
                line = line.strip()
                # look for inet line with IP/mask
                if line.startswith("inet ") and not line.startswith("inet 127."):
                    parts = line.split()
                    # format: inet 192.168.1.10/24 brd ...
                    inet_info = parts[1]
                    ip_part, mask_len = inet_info.split("/")
                    ip = ip_part
                    # convert mask length to netmask
                    mask_len = int(mask_len)
                    netmask = str(ipaddress.IPv4Network(f"0.0.0.0/{mask_len}").netmask)
                    break
            if ip and netmask:
                return ip, netmask
        elif system == "darwin":
            # macOS uses ifconfig
            result = subprocess.run(["ifconfig"], capture_output=True, text=True)
            lines = result.stdout.splitlines()
            ip = None
            netmask = None
            for i in range(len(lines)):
                line = lines[i].strip()
                if line.startswith("inet ") and not line.startswith("inet 127.0.0.1"):
                    parts = line.split()
                    ip = parts[1]
                    netmask = parts[3] if len(parts) > 3 else None
                    if netmask:
                        return ip, netmask
            return None, None
        else:
            # Windows or other
            # Use socket to get IP but netmask may be harder
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            return local_ip, None
    except Exception:
        return None, None

def ip_to_int(ip_str):
    return int(ipaddress.IPv4Address(ip_str))

def int_to_ip(ip_int):
    return str(ipaddress.IPv4Address(ip_int))

def ping_host(ip, output_queue):
    """Ping a host once, put IP into output_queue if alive."""
    param = '-n' if platform.system().lower()=='windows' else '-c'
    command = ['ping', param, '1', '-W', '1', ip]
    with open(subprocess.DEVNULL, 'wb') as devnull:
        result = subprocess.run(command, stdout=devnull, stderr=devnull)
        if result.returncode == 0:
            output_queue.put(ip)

def main():
    print(BLACK_BG_GREEN_TEXT)
    print("=== Network Scanner ===")
    wifi_name = input("Enter your WiFi name (SSID): ")
    wifi_pass = input("Enter your WiFi password: ")
    print()
    print(f"Scanning your network '{wifi_name}' for devices... Please wait.")

    ip, netmask = get_local_ip_and_netmask()
    if not ip or not netmask:
        print("Could not determine local IP or netmask, exiting.")
        print(RESET_COLOR)
        sys.exit(1)

    # Calculate network range
    try:
        network = ipaddress.IPv4Network(f"{ip}/{netmask}", strict=False)
    except Exception as e:
        print(f"Error computing network range: {e}")
        print(RESET_COLOR)
        sys.exit(1)

    # We skip network address and broadcast address; scan usable hosts only
    hosts = list(network.hosts())

    output_queue = queue.Queue()
    threads = []
    max_threads = 100
    sem = threading.Semaphore(max_threads)

    def worker(ip_str):
        sem.acquire()
        try:
            ping_host(ip_str, output_queue)
        finally:
            sem.release()

    for host_ip in hosts:
        ip_str = str(host_ip)
        t = threading.Thread(target=worker, args=(ip_str,))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    found_ips = []
    while not output_queue.empty():
        found_ips.append(output_queue.get())

    found_ips.sort(key=lambda ip: ipaddress.IPv4Address(ip))

    print()
    print(f"Total devices found: {len(found_ips)}")
    if len(found_ips) > 0:
        print("Devices IP Addresses:")
        for ip_addr in found_ips:
            print(f" - {ip_addr}")

    print(RESET_COLOR)

if __name__ == "__main__":
    main()